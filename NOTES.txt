To create a constant in Python that you can use in multiple places, add it to the top of your code.
The naming convention for constants is ALL_CAPS_SNAKE_CASE.

In the past, I've checked whether a number is within a range of values like this:
if number > 1 and number <= 6
But there's a much simpler way: if 1 < number <= 6

Remember, a dictionary's values() method lets you get each key/value pair.

To copy a list, you can write 'list_copy = list_name[:]'
In this case, the colon is called the "slice operator".
This prevents two variables from pointing by reference to the same object (i.e. changing one changes the other).

An array's remove() method removes the first instance of a given value.

In a print() statement, the 'end' attribute specifies what to end a line with (default is a new line '\n').
This is useful when you want to print elements of an array on the same line instead of separate lines.

In Python, you can do a for-else statement (as in the check_winnings() function).
It has this format:
    for element in array:
        if condition:
            break
    else:
        # Do something
If you break out of the for loop, the else statement will not run.
But if a break never occurs, then the else statement will execute.
This is unique to Python; it can be used to check whether you have looped through all of the items in an iterable.
This makes it easier to run specific code (in the else clause) that should only be run if you have iterated through every element.
This also works with while loops.
Just be careful: The else clause will not be executed if you break out of the loop with a return statement or a raised exception.

As a reminder, you can return multiple values.
Ex: return 1, 2, 3
Likewise, you can set multiple variables to those return values.
Ex: a, b, c = my_function()

* is called the 'splat operator'.
This lets you 'unpack' values from an iterable (like an array) into separate arguments.
Example:
    my_array = [0, 'lorem ipsum', True]
    print('Values of array:', *my_array)
    
    # Equivalent print statement:
    # print('Values of array:', my_array[0], my_array[1], my_array[2])